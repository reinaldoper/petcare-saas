generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  address     String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  appointment Appointment[]
  pets        Pet[]
  plan        Plan?
  stock       Stock[]
  users       User[]
  historic    VaccineHistory[]
}

model Pet {
  id           Int              @id @default(autoincrement())
  name         String
  ownerName    String
  birthDate    DateTime
  species      String
  userId       Int
  clinicId     Int
  appointments Appointment[]
  clinic       Clinic           @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  vaccines     VaccineHistory[]
}

model Plan {
  id        Int      @id @default(autoincrement())
  type      PlanType @default(FREE)
  clinicId  Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinic    Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
}

model Appointment {
  id       Int      @id @default(autoincrement())
  date     DateTime
  reason   String
  petId    Int
  clinicId Int
  priority  Boolean  @default(false)
  price   Float?
  clinic   Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  pet      Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model VaccineHistory {
  id        Int      @id @default(autoincrement())
  vaccine   String
  appliedAt DateTime
  petId     Int
  clinicId  Int
  clinic    Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Stock {
  id         Int       @id @default(autoincrement())
  name       String
  quantity   Int
  type       StockType
  validUntil DateTime
  price     Float?
  totalPrice Float? @default(0)
  clinicId   Int
  clinic     Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String   @unique
  role      Role     @default(CLIENT)
  clinicId  Int
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pets      Pet[]
  clinic    Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
}

enum PlanType {
  FREE
  PAY
}

enum StockType {
  PRODUCT
  VACCINE
}

enum Role {
  ADMIN
  CLIENT
}

model Subscription {
  id        Int      @id @default(autoincrement())
  payerId                 BigInt
  payerEmail              String? 
  status                  String
  reason                  String
  dateCreated             DateTime
  lastModified            DateTime
  nextPaymentDate         DateTime
  initPoint               String
  subscriptionId          String
  applicationId           BigInt
  collectorId             BigInt
  backUrl                 String

  autoRecurring           AutoRecurring @relation(fields: [autoRecurringId], references: [id])
  autoRecurringId         Int

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model AutoRecurring {
  id                 Int      @id @default(autoincrement())
  frequency          Int
  frequencyType      String
  transactionAmount  Float
  currencyId         String

  subscription       Subscription[]
}

model Payment {
  id            Int      @id @default(autoincrement())
  paymentId     Int   @unique
  status        String
  method        String 
  amount        Float
  payerEmail    String
  createdAt     DateTime @default(now())
}


